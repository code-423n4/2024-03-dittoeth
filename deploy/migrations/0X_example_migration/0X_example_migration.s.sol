// SPDX-License-Identifier: GPL-3.0-only
pragma solidity 0.8.21;

//some imports are used through inheritance
import {Errors, stdError, IDiamond, IDiamondCut, console, MigrationHelper} from "deploy/migrations/MigrationHelper.sol";

//in the case where a function signature is altered or the function is removed via diamond cut declare interface for use
interface ReplacedFunctions {
    function depositAsset(address, uint104) external;
    function withdrawAsset(address, uint104) external;
}

// command to run script
// FOUNDRY_PROFILE=deploy-mainnet forge script ExampleMigration0X --ffi
contract ExampleMigration0X is MigrationHelper {
    //declare shared variables here - tests will inherit this contract
    bytes internal vaultFacetInitcode;
    bytes internal vaultConstructorArgs;
    address internal vaultFacetAddress;

    bytes32 internal SALT;

    bytes4[] internal replaceSelectors = [ReplacedFunctions.depositAsset.selector, ReplacedFunctions.withdrawAsset.selector];

    bytes internal diamondCutPayload;

    bytes internal setTithePayload;

    // fork and initialize variables shared between the script and test
    function setUp() public virtual {
        //choose a block number where your migrations and tests are valid
        fork(18965029);

        //copy the corresponding bytecode from artifacts-gas to the migration folder
        //this is important because the live codebase is changing, but these migrations happen at a certain time in the protocol's history
        bytes memory vaultFacetBytecode = getBytecode("0X_example_migration/VaultFacet.json");
        vaultConstructorArgs = abi.encode(address(0));

        vaultFacetInitcode = abi.encodePacked(vaultFacetBytecode, vaultConstructorArgs);

        // occasionally you want to mine a create2 salt to get a 0xD1770 prefix - use the init code print below in modified creat2crunch
        // console.log("init code hash for salt generation");
        // emit log_bytes32(keccak256(vaultFacetInitcode));

        //replace below with what gets generated by create2crunch if a 0xD1770 prefix is desired
        SALT = bytes32(0);

        vaultFacetAddress = create2Factory.findCreate2Address(SALT, vaultFacetInitcode);

        facetCut.push(
            IDiamondCut.FacetCut({
                facetAddress: vaultFacetAddress,
                action: IDiamondCut.FacetCutAction.Replace,
                functionSelectors: replaceSelectors
            })
        );

        diamondCutPayload = abi.encodeWithSelector(IDiamond.diamondCut.selector, facetCut, address(0), "");

        setTithePayload = abi.encodeWithSelector(IDiamond.setTithe.selector, 1, 11_00);

        targets.push(_diamond);
        values.push(0);
        calldatas.push(setTithePayload);
        descriptionString = "set tithe of vault_one to 11%";
        descriptionHash = keccak256(bytes(descriptionString));
    }

    function run() external {
        //safe wallet transactions can be bundled and batched - see formatting below for organization
        //deploy vault
        bytes memory safeCreate2 = abi.encodeWithSelector(create2Factory.safeCreate2.selector, SALT, vaultFacetInitcode);
        console.log("----------------------------------------------------");
        console.log("batch 1 - vaultFacet safeCreate2 txn data");
        console.log("to address: ", _immutableCreate2Factory);
        console.newLine();
        emit log_bytes(safeCreate2);
        console.newLine();

        //for directly scheduling transaction on timelock use schedule or scheduleBatch from _safeWallet
        //timelock schedule diamond cut replace vaultFacet
        bytes memory timelockSchedule =
            abi.encodeWithSelector(timelock.schedule.selector, _diamond, 0, diamondCutPayload, bytes32(0), bytes32(0), 0);
        console.log("----------------------------------------------------");
        console.log("batch 2 - schedule diamondCut replace vaultFacet txn data");
        console.log("to address: ", _timelock);
        console.newLine();
        emit log_bytes(timelockSchedule);
        console.newLine();

        //timelock execute diamond cut replace vaultFacet
        bytes memory timelockExecute =
            abi.encodeWithSelector(timelock.execute.selector, _diamond, 0, diamondCutPayload, bytes32(0), bytes32(0), 0);
        console.log("----------------------------------------------------");
        console.log("batch 2 - execute diamondCut replace vaultFacet txn data");
        console.log("to address: ", _timelock);
        console.newLine();
        emit log_bytes(timelockExecute);
        console.newLine();

        //for governor proposals it will likely be easier to go through tally
        //https://docs.tally.xyz/knowledge-base/proposals/creating-proposals
        //but for the sake of docs and knowledge - an example of how to using foundry scripts / safewallet

        bytes memory governorPropose =
            abi.encodeWithSelector(governor.propose.selector, targets, values, calldatas, descriptionString);
        console.log("----------------------------------------------------");
        console.log("batch 3 - governor propose setTithe of vault_one to 11%");
        console.log("to address: ", _governor);
        console.newLine();
        emit log_bytes(governorPropose);
        console.newLine();

        //once the voting period has ended and the proposal passes - in real usage this will probably be a new script
        bytes memory governorQueue = abi.encodeWithSelector(governor.queue.selector, targets, values, calldatas, descriptionHash);
        console.log("----------------------------------------------------");
        console.log("batch 4 - governor queue setTithe of vault_one to 11%");
        console.log("to address: ", _governor);
        console.newLine();
        emit log_bytes(governorQueue);
        console.newLine();

        //once a proposal has been queued and the requisite timelock time has passed
        bytes memory governorExecute =
            abi.encodeWithSelector(governor.execute.selector, targets, values, calldatas, descriptionHash);
        console.log("----------------------------------------------------");
        console.log("batch 5 - governor execute setTithe of vault_one to 11%");
        console.log("to address: ", _governor);
        console.newLine();
        emit log_bytes(governorExecute);
        console.newLine();
    }
}
